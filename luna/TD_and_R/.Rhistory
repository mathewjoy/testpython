help()
help(install)
help.install()
install.packages("KernSmooth")
load("KernSmooth")
load(KernSmooth)
library(KernSmooth)
x<-c("a","b")
x<-function(){5}
x
x()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
j<-c(z,555)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0.10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
swirl()
5+7
quit()
library(swirl)
swirl()
1:20
pi:10
15:27
15:17
15:1
?':'
seq(1,20)
seq(1,10, by = .5)
seq(1,10, by = 0.5)
seq(0,10, by = 0.5)
my_seq=seq(5,10,30)
my_seq=seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my.seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
lapply()
cls_list<-lapply(flags,class)
class(cls_list)
as.character(cls_list)
?sapply
cls_list<-sapply(flags,class)
sapply(flags,class)
cls_vect <- sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_colors,range)
sapply(flag_shapes,range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_order <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(4,5,5,5,6,6)
unique(3,4,5,5,5,6,6)
unique((c(3,4,5,5,5,6,6)
)
)
unique(c(3,4,5,5,5,6,6))
lapply(flags, range)
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
dim(flags)
dim(head)
head(flags)
flags
quit()
info()
main()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
vapply(flags,class)
sapply(flags,class)
vapply(flags,class,numeric(1))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
play()
flags$animate
info()
nxt()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?sample
sample(1:6, 4, replace=T)
sample(1:6, 4, replace=TRUE)
sample(1:6, 1, replace=TRUE)
play()
sample(1:6, 1, replace=TRUE)
sample(1:6, 1, replace=TRUE)
sample(1:6, 1, replace=TRUE)
sample(1:6, 1, replace=TRUE)
sample(1:6, 1, replace=TRUE)
play()
nxt()
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob=c(.3,.7))
sample(c(0,1),100,replace=TRUE, prob=c(.3,.7))
flips<-sample(c(0,1),100,replace=TRUE, prob=c(.3,.7))
fplips
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=.7)
rbinom(100, size=1, prob=.7)
flips2=rbinom(100, size=1, prob=.7)
flips2<-rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
norm(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpos
?rpois
pois(5, 5)
rpois(5, 5)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois<-replicate(100, rpois(5, 10))
my_pois
quit);
quit()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
installed.packages()[,c("Package","Version")]
sort(installed.packages()[,c("Package","Version")])
sort(installed.packages()[,c("Package","Version")], 1)
?sort
installed.packages()[,c("Package","Version")]
installed.packages()[,c("Package","Version")]
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf=read.csv(path2csv, stringAsFactors=F)
mydf=read.csv(path2csv, stringAsFactors=FALSE)
mydf=read.csv(path2csv, stringSAsFactors=FALSE)
mydf=read.csv(path2csv, stringsAsFactors=FALSE)
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
tbl_df
tbl_df_impl
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(ip_id, package, country)
select(cran,ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size)
)
filter(cran,package == "swirl")
filter(cran,r_version == "3.1.1")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN" | country == "US")
filter(cran,r_version <= "3.0.2", country == "US" | country == "IN" )
filter(cran,r_version <= "3.0.2", country == "US" | country == "IN" )
filter(cran, country == "US" | country == "IN" )
filter(cran, country == "US" | country == "IN" , size > 100500)
filter(cran,  size > 100500, country == "US" | country == "IN" ,r_os="linux-gnu")
filter(cran,  size > 100500,r_os="linux-gnu")
filter(cran,  size > 100500,r_os=="linux-gnu")
filter(cran,  size > 100500,r_os=="linux-gnu", is.na(r_version))
filter(cran,  size > 100500,r_os=="linux-gnu", is.na(c(3,5,NA,10)))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,  size > 100500,r_os=="linux-gnu", !is.na()))
filter(cran,  size > 100500,r_os=="linux-gnu", !is.na(r_version)))
filter(cran,  size > 100500,r_os=="linux-gnu", !is.na(r_version))
info()
filter(cran,  !is.na(r_version))
cran2 := select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package, ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,package, ip_id, country(ascending), r_version (descending))
arrange(cran2,package, ip_id(scending), country(ascending), r_version (descending))
arrange(cran2,ip_id(scending), country(ascending), r_version (descending))
arrange(cran2,country(ascending), r_version (descending), ip_id (ascending))
?arrange
arrange(cran2,desc(country), desc(r_version), ascend(ip_id))
arrange(cran2,desc(country), desc(r_version), asc(ip_id))
arrange(cran2,asc(country), desc(r_version), asc(ip_id))
?asc
?desc
?asce
?asced
arrange(cran2,country, desc(r_version), ip_id)
salect(cran, ip_id, package, size)
select(cran, ip_id, package, size)
cran3->select(cran, ip_id, package, size)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^10, correct_size = size + 1000)
mutate(cran3,orrect_size = size + 1000)
mutate(cran3,correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
byye()
bye()
quit
exit
exit()
source('~/coursera/datasc_expldata/ExData_Plotting1/testDate.R')
.packages
x<.packages
x<-.packages
x
.packages()
x<-.packages()
x
library(x)
?local
install.packages('RJDBC')
install.packages('RJDBC')
library(rjdbc)
library(RJDBC)
clear
library(RJDBC)
drv<-drv = JDBC("com.teradata.jdbc.TeraDriver","/home/jdbc/TD_15.10")
drv<-drv = JDBC("com.teradata.jdbc.TeraDriver","/home/jdbc/TD_15.10/*")
drv<-drv = JDBC("com.teradata.jdbc.TeraDriver","/home/jdbc/TD_15.10/terajdbc4.jar;/home/jdbc/TD_15.10/tdgssconfig.jar")
drv<-JDBC("com.teradata.jdbc.TeraDriver","/home/jdbc/TD_15.10/terajdbc4.jar;/home/jdbc/TD_15.10/tdgssconfig.jar")
drv<-JDBC("com.teradata.jdbc.TeraDriver","/home/jdbc/TD_15.10/terajdbc4.jar:/home/jdbc/TD_15.10/tdgssconfig.jar")
jclasspath()
.jclasspath()
.jclassPath()
.jaddClassPath("/home/jdbc/TD_15.10/terajdbc4.jar")
.jaddClassPath("/home/jdbc/TD_15.10/tdgssconfig.jar")
.jclassPath()
.jclassPath()
.jaddClassPath("/home/jdbc/TD_15.10/tdgssconfig.jar")
.jaddClassPath("/home/jdbc/TD_15.10/terajdbc4.jar")
.jclassPath()
.jaddClassPath(/home/jdbc/TD_15.10/terajdbc4.jar')
.jaddClassPath('/home/jdbc/TD_15.10/terajdbc4.jar')
.jclassPath()
driverclass
driverClass
jclassPath
jclassPath()
.jclassPath()
.jaddClassPath("/home/jdbc/TD_15.10/terajdbc4.jar")
.jclassPath()
x<-.jaddClassPath("/home/jdbc/TD_15.10/terajdbc4.jar")
x
help .jaddClasspath
help .jaddClasspath()
? .jaddClasspath()
? .jaddClassPath()
x<-.jaddClassPath("/home/jdbc/TD_15.10/terajdbc4.jar","/home/jdbc/TD_15.10/terajdbc4.jar")
x<-.jaddClassPath(c("/home/jdbc/TD_15.10/terajdbc4.jar","/home/jdbc/TD_15.10/terajdbc4.jar"))
x
.classPath
.classPath()
.classPath()
.classPath()
.jclassPath()
.jaddClassPath(c("/home/jdbc/TD_15.10/terajdbc4.jar","/home/jdbc/TD_15.10/terajdbc4.jar"))
.jaddClassPath(c("/home/jdbc/TD_15.10/terajdbc4.jar","/home/jdbc/TD_15.10/terajdbc4.jar"))
.jclassPath()
source('~/workspace/luna/TD_and_R/tdconn.R')
setwd("~/workspace/luna/TD_and_R")
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
install.packages("teradataR")
install.packages('RODBC')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
install.packages('teradataR')
install.packages('TeradataR')
install.packages('devtools')
library(devtools)
install.packages("xml2")
install.packages('devtools')
install.packages('Rcpp')
install.packages('devtools')
library(devtools)
install("teradataR")
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
library(teradataR)
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
source('~/workspace/luna/TD_and_R/tdconn.R')
installed.packages()
install.packages('rJava')
install.packages("rJava")
source('~/workspace/luna/TD_and_R/tdconn.R')
installed.packages()
?installed.packages()
installed.packages()
source('~/workspace/luna/TD_and_R/tdconn.R')
library(rJava)
.init()
.jinit()
.jpackage('rJava', jars="/home/jdbc/TD_15.10/terajdbc4.jar:/home/jdbc/TD_15.10/tdgssconfig.jar",morePaths=T)
.jclassPath()
